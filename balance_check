#!/bin/sh -eu

if test $# -ne 1; then
    echo Usage: $0 BALANCE_CONFIG_JSON >&2
    echo >&2
    echo Reads standard input and outputs Icinga perfdata line >&2
    exit 3
fi

own="`dirname $0`"
tmp=`mktemp`

cat "$own/split_lines.jq" >>$tmp

jq -c  '.items, .item_limits, .ratio_limits' <"$1" | {
    # Read JSON file to vars
    read -r items
    read -r item_limits
    read -r ratio_limits

    # Produce limits and put data in
    cat <<EOF >>$tmp
    	| group_by(.)
	| ( $items | map({key:., value:0})) + map({key:.[0], value: length})
	| from_entries
	| map_values($item_limits + {value:.})
	+ { ratio: ($ratio_limits + {max: 1, value: (map(.) | min / add * length)})}
	|
EOF
}

# Check limits
cat "$own/inject_state.jq" >>$tmp

# Add msg and exit values based on checked limits
cat <<EOF >>$tmp
    | { msg: ( "connections: " + (del(.ratio) | map(.value) | add | tostring)
             + ", ratio: " + (.ratio.value*100+0.5 | floor/100 | tostring)
             )
      , data: .
      , exit: map(.state) | max
      }
    |
EOF

# Produce Icinga perfdata lines
cat "$own/perfdata.jq" >>$tmp 

jq -Rrsf $tmp | {
    read ret
    cat
    rm $tmp
    exit $ret
}
